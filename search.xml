<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++和Java中static的异同]]></title>
    <url>%2F2018%2F07%2F31%2FC%2B%2B%E5%92%8CJava%E4%B8%ADstatic%E7%9A%84%E5%BC%82%E5%90%8C%2F</url>
    <content type="text"><![CDATA[本文主要比较C++和Java的static在类中的异同 相同点 静态数据成员：类的所有对象都共享静态数据成员 静态方法：两者的静态方法都有以下限制 123方法中仅能访问静态方法方法中仅能访问静态成员方法中不能使用this以及super 都能直接用类名访问静态成员，但是写法稍有不同 123C++: 类名::成员名（数据成员或方法）Java: 类名.成员名 不同点 Java支持静态代码块, 用于支持类的初始化, 静态代码块中的代码仅在第一次新建对象时或第一次访问类的静态成员时才执行, 且仅执行一次, C++不支持以上特性 C++支持静态局部变量（即方法中的静态局部变量）, 而Java不支持, eg. 123456789class Test &#123; public static void main(String args[]) &#123; System.out.println(fun()); &#125; static int fun() &#123; static int x= 10; //Compiler Error: Static local variables are not allowed return x--; &#125;&#125; 参考Comparison of static keyword in C++ and Java]]></content>
      <categories>
        <category>C++杂谈</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>static</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Intellij编译Spark源码]]></title>
    <url>%2F2018%2F04%2F01%2F%E4%BD%BF%E7%94%A8Intellij%E7%BC%96%E8%AF%91Spark%E6%BA%90%E7%A0%81%2F</url>
    <content type="text"><![CDATA[记录一下Intellij编译Spark的过程 使用Git从Github clone Spark源码 1git clone https://github.com/apache/spark.git 把Spark导入到Intellij中 File -&gt; New -&gt; Projects From Existing Sources -&gt; 选择clone的spark -&gt; Maven Project -&gt;…(接下来的操作使用默认即可) Building Spark 使用Intellij自带的maven进行编译： View -&gt; Tool Windows -&gt; Maven Projects 在打开的Maven面板中点击Execute Maven Goal小按钮，输入以下其中一个命令之一即可： 12345671、mvn clean package -Dmaven.test.skip=true2、mvn clean install -Dmaven.test.skip=true（发布到maven本地仓库中）3、mvn -DskipTests clean package4、mvn -DskipTests clean install (发布到maven本地仓库中) 可能是因为墙的原因，使用官方的 ./build/mvn -DskipTests clean package 命令一直都显示已连接，然后就没了==，不过使用sbt可以编译成功，在终端输入 ./build/sbt package 即可（需要梯子） 其他更多的编译命令可参考Spark官方文档Building Spark - Spark 2.3.0 Documentation 参考： https://spark.apache.org/docs/latest/building-spark.html https://blog.csdn.net/high2011/article/details/76651290]]></content>
      <categories>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Spark</tag>
        <tag>Intellij</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Deepin安装常用工具命令]]></title>
    <url>%2F2018%2F03%2F26%2FDeepin%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[安装gcc g++1sudo apt-get gcc g++ build-essential 安装Java 为了使Deepin能够使用ppa源，需要先安装以下依赖 123sudo apt-get install python-software-propertiessudo apt-get install software-properties-commonsudo apt-get update 现在可以使用add-apt-repository命令添加ppa源了 12sudo add-apt-repository ppa:webupd8team/java sudo apt-get update 最后使用以下命令即可安装Java 12sudo apt-get install oracle-java9-installersudo update-java-alternatives -s java-9-oracle //这条命令是设置Java9为默认Java版本 安装git 下载Git 1sudo apt-get install git 设置用户名和邮箱 12git config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱&quot; 生成key 12ssh-keygen -t rsa// 按三次回车默认即可 把/home/username/.ssh下的id_rsa.pub中的内容复制进Github即可 安装nodejs以及npm12sudo apt-get install nodejssudo apt-get install npm]]></content>
      <categories>
        <category>Deepin</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[scala函数定义]]></title>
    <url>%2F2018%2F03%2F23%2Fscala%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%2F</url>
    <content type="text"><![CDATA[总结了一下Scala中常见的几种函数定义方式 最原始的方式 123def add(a:Int, b:Int):Int = &#123; return a+b&#125; 进一步简化，首先Scala中不推荐使用return（默认返回最后一个表达式的值)，而且Scala可以省略返回值的类型。 简化的定义方式 1def add(a:Int, b:Int) = a + b 使用Lambda表达式定义 123val add : (Int, Int) =&gt; Int = (a, b) =&gt; a + b或val add = (a:Int, b:Int) =&gt; a + b 单参数1val fun:Int=&gt;String = p =&gt; &quot;The value of p is &quot; + p.toString() Note:定义函数时，如果没有写返回值类型，函数体前的“=”可以省略，如果显示声明了返回值类型，就必须要有“=”,eg.123456789//没有写返回值类型，省略等号def fun() &#123; println(&quot;Hello World~&quot;)&#125;//有返回值类型，等号必须写def fun():String = &#123; &quot;Hello&quot; + &quot;~World~&quot;&#125;]]></content>
      <categories>
        <category>Scala</category>
      </categories>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis的使用]]></title>
    <url>%2F2017%2F10%2F02%2FRedis%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[启动（Windows下） 在Resid目录下打开终端，输入redis-server.exe redis.windows.conf命令即可开启Redis 打开一个新的终端，输入redis-cli.exe进入Redis的命令交互界面 出现Creating Server TCP listening socket 127.0.0.1:6379: bind: No error错误说明Redis已经启动，直接输入redis-cli.exe进行使用，或按以下步骤解决： redis-cli.exe shutdown exit redis-server.exe redis.windows.conf]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>NoSql</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[笔试总结]]></title>
    <url>%2F2017%2F09%2F07%2F%E7%AC%94%E8%AF%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[面试总结]]></title>
    <url>%2F2017%2F09%2F07%2F%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[2017-9-7 华为面试技术相关 系统的模块化划分？ 把一个系统分解小模块？如何分解。 如何更清晰地描述好自己写的算法？ 非技术类问题 当有多个工作需要同时进行时，怎么规划自己的时间? 应该需要从多个方面去回答，分多种情况，比如当。。。时候，应该以。。。为重。 你觉得自己的自学能力如何？从那些方面可以体现出来，举个例子。 你还有什么问题想问的吗？ 这个一定要问，就算不知道该问什么，也要能扯出一些什么问题来。。但是要避免涉及到面试官的隐私之类的问题。]]></content>
      <categories>
        <category>胡说八道</category>
      </categories>
      <tags>
        <tag>招聘</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[收藏夹]]></title>
    <url>%2F2017%2F07%2F06%2F%E6%94%B6%E8%97%8F%E6%8E%A7%2F</url>
    <content type="text"><![CDATA[主要是一些平时收藏的网页，工具 编辑器Markdown Editor.md 富文本 bootstrap-wysiwyg : 嵌入简单 wangEditor UEditor JavaScript相关插件 SweetAlert : 一个美化的JS弹框，不依赖于JQuery distpicker : 一个jQuery的省市区三级联动的地址选择器]]></content>
      <categories>
        <category>collection</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>网页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架-使用MyBatis Generator自动生成代码]]></title>
    <url>%2F2017%2F07%2F05%2FSSM%E6%A1%86%E6%9E%B6-%E4%BD%BF%E7%94%A8MyBatis-Generator%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[MyBatis Generator下载 下载 MyBatis Generator 下载之后，解压，把jdbc以及MyBatis的包复制进lib文件夹中。 新建一个generatorConfig.xml文件 配置文件generatorConfig.xml配置文件如下12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt; &lt;generatorConfiguration&gt; &lt;!-- 数据库驱动--&gt; &lt;classPathEntry location=&quot;mysql-connector-java-5.1.42-bin.jar&quot;/&gt; &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;commentGenerator&gt; &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt; &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt; &lt;/commentGenerator&gt; &lt;!--数据库链接URL，用户名、密码 --&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost/test&quot; userId=&quot;root&quot; password=&quot;&quot;&gt; &lt;/jdbcConnection&gt; &lt;javaTypeResolver&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt; &lt;/javaTypeResolver&gt; &lt;!-- 实体类的包名以及生成路径--&gt; &lt;javaModelGenerator targetPackage=&quot;test.pojo&quot; targetProject=&quot;src&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt; &lt;/javaModelGenerator&gt; &lt;!-- 配置文件包名以及生成路径--&gt; &lt;sqlMapGenerator targetPackage=&quot;test.mapper&quot; targetProject=&quot;src&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 生成的mapper接口--&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;test.mapper&quot; targetProject=&quot;src&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/javaClientGenerator&gt; &lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt; &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt; &lt;!-- 要生成几个表就写几个table标签--&gt; &lt;/context&gt; &lt;/generatorConfiguration&gt; 使用方法在lib目录下打开命令窗口（shift+鼠标右键，选择PowerShell）输入以下命令：1java -jar mybatis-generator-core-1.3.5.jar -configfile generatorConfig.xml -overwrite 执行命令之后将会在src目录下生成配置文件中包所对应的路径下的相关代码。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SSM</tag>
        <tag>MyBatis Generator</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架搭建]]></title>
    <url>%2F2017%2F07%2F05%2FSSM%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[先占个坑。。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringMVC</tag>
        <tag>Spring</tag>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法学习]]></title>
    <url>%2F2017%2F05%2F25%2FMarkdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[标题1234# 一级标题(注意#和文字之间的空格）## 二级标题### 三级标题依此类推... 代码1231.反引号`之间插入代码2.三个反引号之间插入代码3.在code标签之间插入代码&lt;code&gt;&lt;/code&gt; 引用 这是一段引用markdown语法如下 12&gt; 这是一段引用&gt; markdown语法如下 链接超链接Google12[Google](www.google.com)&lt;a href=&quot;www.google.com&quot;&gt;Google&lt;/a&gt; markdown可以直接嵌入HTML标签,所以可以直接用HTML来写markdown。 图片链接12![图片](图片地址)&lt;img src=&quot;&quot;&gt; 列表无序列表 列表一 列表二 列表三 12345678910111213141516（注意-和文字之间的空格，下同）- 列表一- 列表二- 列表三或+ 列表一+ 列表一+ 列表二或* 列表二* 列表三* 列表三 有序列表 列表一 列表二 列表三 1231. 列表一2. 列表二3. 列表三 表格 表项1 表项2 表项3 1 2 3 4 5 6 7 8 9 12345表项1|表项2|表项3--:|:--:|:--1 | 2| 34 | 5| 67 | 8| 9 第二行的冒号用来表示对齐方式，冒号在左边表示靠左显示，两边都有冒号表示居中对齐 格式粗体和斜体粗体斜体粗斜体123**粗体***斜体****粗斜体*** 参考Markdown 语法说明 (简体中文版)]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>